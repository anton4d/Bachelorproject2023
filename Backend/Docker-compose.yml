version: '3.3'
services:

  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'db'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'user'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'password'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      # <Port exposed> : <MySQL Port running inside container>
      - '3306:3306'
    expose:
      # Opens port 3306 on the container
      - '3306'
      # Where our data will be persisted
    volumes:
      - my-db:/var/lib/mysql
    networks:
      - express-mysql-network

  adminer:
    image: adminer
    container_name: adminer-docker
    depends_on:
      - db
    ports:
      - '8080:8080'
    networks:
      - express-mysql-network
    restart: on-failure

  redis:
    image: redis
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data
    networks:
      - redis-network

  userService:
    build:
      context: ./UserService
      dockerfile: Dockerfile
    ports:
      - '6666:3000'
    depends_on:
      - db
    networks:
      - express-mysql-network
    restart: on-failure
    environment:
      - DB=db
      - DBUser=user
      - DBPassword=password
      - DBHost=db
      - DBPort=3306
      - NODE_ENV=development
      - PORT=3000

  shopService:
    build:
      context: ./ShopService
      dockerfile: Dockerfile
    ports:
      - '6667:3000'
    depends_on:
      - db
    networks:
      - express-mysql-network
    restart: on-failure
    environment:
      - DB=db
      - DBUser=user
      - DBPassword=password
      - DBHost=db
      - DBPort=3306
      - NODE_ENV=development
      - PORT=3000

  offerService:
    build:
      context: ./OffersService
      dockerfile: Dockerfile
    ports:
      - '6668:3000'
    depends_on:
      - db
      - redis
    networks:
      - express-mysql-network
      - redis-network
    restart: on-failure
    environment:
      - DB=db
      - DBUser=user
      - DBPassword=password
      - DBHost=db
      - DBPort=3306
      - NODE_ENV=development
      - REDIS_PORT=6379
      - REDIS_HOST=redis
      - PORT=3000

  sallingApiService:
    build:
      context: ./SallingApiService
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    depends_on:
      - db
      - redis
    networks:
      - express-mysql-network
      - redis-network
    restart: on-failure
    environment:
      - DB=db
      - DBUser=user
      - DBPassword=password
      - DBHost=db
      - DBPort=3306
      - NODE_ENV=development
      - REDIS_PORT=6379
      - REDIS_HOST=redis
      - SALLINGAPISHOP=https://api.sallinggroup.com/v2/stores
      - SALLINGAPIOFFER=https://api.sallinggroup.com/v1/food-waste/
      - TOKEN=2290a1bd-4b27-40e7-8a64-9aa736bd1ae3

volumes:
  my-db:
  redis_data:

networks:
  express-mysql-network:
  redis-network:
